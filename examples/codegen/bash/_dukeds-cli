#compdef dukeds-cli

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! swagger-codegen (https://github.com/swagger-api/swagger-codegen)
# ! FROM SWAGGER SPECIFICATION IN JSON.
# !
# ! Based on: https://github.com/Valodim/zsh-curl-completion/blob/master/_curl
# !
# ! Generated on: 2017-10-04T20:19:52.734Z
# !
# !
# ! Installation:
# !
# ! Copy the _dukeds-cli file to any directory under FPATH
# ! environment variable (echo $FPATH)
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


local curcontext="$curcontext" state line ret=1
typeset -A opt_args

typeset -A mime_type_abbreviations
# text/*
mime_type_abbreviations[text]="text/plain"
mime_type_abbreviations[html]="text/html"
mime_type_abbreviations[md]="text/x-markdown"
mime_type_abbreviations[csv]="text/csv"
mime_type_abbreviations[css]="text/css"
mime_type_abbreviations[rtf]="text/rtf"
# application/*
mime_type_abbreviations[json]="application/json"
mime_type_abbreviations[xml]="application/xml"
mime_type_abbreviations[yaml]="application/yaml"
mime_type_abbreviations[js]="application/javascript"
mime_type_abbreviations[bin]="application/octet-stream"
mime_type_abbreviations[rdf]="application/rdf+xml"
# image/*
mime_type_abbreviations[jpg]="image/jpeg"
mime_type_abbreviations[png]="image/png"
mime_type_abbreviations[gif]="image/gif"
mime_type_abbreviations[bmp]="image/bmp"
mime_type_abbreviations[tiff]="image/tiff"

#
# Generate zsh completion string list for abbreviated mime types
#
get_mime_type_completions() {
    typeset -a result
    result=()
    for k in "${(@k)mime_type_abbreviations}"; do
        value=$mime_type_abbreviations[${k}]
        #echo $value
        result+=( "${k}[${value}]" )
        #echo $result
    done
    echo "$result"
}

#
# cURL crypto engines completion function
#
_curl_crypto_engine() {
    local vals
    vals=( ${${(f)"$(curl --engine list)":gs/ /}[2,$]} )
    _describe -t outputs 'engines' vals && return 0
}

#
# cURL post data completion functions=
#
_curl_post_data() {

    # don't do anything further if this is raw content
    compset -P '=' && _message 'raw content' && return 0

    # complete filename or stdin for @ syntax
    compset -P '*@' && {
        local expl
        _description files expl stdin
        compadd "$expl[@]" - "-"
        _files
        return 0
    }

    # got a name already? expecting data.
    compset -P '*=' && _message 'data value' && return 0

    # otherwise, name (or @ or =) should be specified
    _message 'data name' && return 0

}


local arg_http arg_ftp arg_other arg_proxy arg_crypto arg_connection arg_auth arg_input arg_output

# HTTP Arguments
arg_http=(''\
  {-0,--http1.0}'[force use of use http 1.0 instead of 1.1]' \
  {-b,--cookie}'[pass data to http server as cookie]:data or file' \
  {-c,--cookie-jar}'[specify cookie file]:file name:_files' \
  {-d,--data}'[send specified data as HTTP POST data]:data:{_curl_post_data}' \
  '--data-binary[post HTTP POST data without any processing]:data:{_curl_post_data}' \
  '--data-urlencode[post HTTP POST data, with url encoding]:data:{_curl_post_data}' \
  {-f,--fail}'[enable failfast behavior for server errors]' \
  '*'{-F,--form}'[add POST form data]:name=content' \
  {-G,--get}'[use HTTP GET even with data (-d, --data, --data-binary)]' \
  '*'{-H,--header}'[specify an extra header]:header' \
  '--ignore-content-length[ignore Content-Length header]' \
  {-i,--include}'[include HTTP header in the output]' \
  {-j,--junk-session-cookies}'[discard all session cookies]' \
  {-e,--referer}'[send url as referer]:referer url:_urls' \
  {-L,--location}'[follow Location headers on http 3XX response]' \
  '--location-trusted[like --location, but allows sending of auth data to redirected hosts]' \
  '--max-redirs[set maximum number of redirection followings allowed]:number' \
  {-J,--remote-header-name}'[use Content-Disposition for output file name]' \
  {-O,--remote-name}'[write to filename parsed from url instead of stdout]' \
  '--post301[do not convert POST to GET after following 301 Location response (follow RFC 2616/10.3.2)]' \
  '--post302[do not convert POST to GET after following 302 Location response (follow RFC 2616/10.3.2)]' \
  )

# FTP arguments
arg_ftp=(\
  {-a,--append}'[append to target file instead of overwriting (FTP/SFTP)]' \
  '--crlf[convert LF to CRLF in upload]' \
  '--disable-eprt[disable use of EPRT and LPRT for active FTP transfers]' \
  '--disable-epsv[disable use of EPSV for passive FTP transfers]' \
  '--ftp-account[account data (FTP)]:data' \
  '--ftp-alternative-to-user[command to send when USER and PASS commands fail (FTP)]:command' \
  '--ftp-create-dirs[create paths remotely if it does not exist]' \
  '--ftp-method[ftp method to use to reach a file (FTP)]:method:(multicwd ocwd singlecwd)' \
  '--ftp-pasv[use passive mode for the data connection (FTP)]' \
  '--ftp-skip-pasv-ip[do not use the ip the server suggests for PASV]' \
  '--form-string[like --form, but do not parse content]:name=string' \
  '--ftp-pret[send PRET before PASV]' \
  '--ftp-ssl-ccc[use clear command channel (CCC) after authentication (FTP)]' \
  '--ftp-ssl-ccc-mode[sets the CCC mode (FTP)]:mode:(active passive)' \
  '--ftp-ssl-control[require SSL/TLS for FTP login, clear for transfer]' \
  {-l,--list-only}'[list names only when listing directories (FTP)]' \
  {-P,--ftp-port}'[use active mode, tell server to connect to specified address or interface (FTP]:address' \
  '*'{-Q,--quote}'[send arbitrary command to the remote server before transfer (FTP/SFTP)]:command' \
  )

# Other Protocol arguments
arg_other=(\
  '--mail-from[specify From: address]:address' \
  '--mail-rcpt[specify email recipient for SMTP, may be given multiple times]:address' \
  {-t,--telnet-option}'[pass options to telnet protocol]:opt=val' \
  '--tftp-blksize[set tftp BLKSIZE option]:value' \
  )

# Proxy arguments
arg_proxy=(\
  '--noproxy[list of hosts to connect directly to instead of through proxy]:no-proxy-list' \
  {-p,--proxytunnel}'[tunnel non-http protocols through http proxy]' \
  {-U,--proxy-user}'[specify the user name and password to use for proxy authentication]:user:password' \
  '--proxy-anyauth[use any authentication method for proxy, default to most secure]' \
  '--proxy-basic[use HTTP Basic authentication for proxy]' \
  '--proxy-digest[use http digest authentication for proxy]' \
  '--proxy-negotiate[enable GSS-Negotiate authentication for proxy]' \
  '--proxy-ntlm[enable ntlm authentication for proxy]' \
  '--proxy1.0[use http 1.0 proxy]:proxy url' \
  {-x,--proxy}'[use specified proxy]:proxy url' \
  '--socks5-gssapi-service[change service name for socks server]:servicename' \
  '--socks5-gssapi-nec[allow unprotected exchange of protection mode negotiation]' \
  )

# Crypto arguments
arg_crypto=(\
  {-1,--tlsv1}'[Forces curl to use TLS version 1 when negotiating with a remote TLS server.]' \
  {-2,--sslv2}'[Forces curl to use SSL version 2 when negotiating with a remote SSL server.]' \
  {-3,--sslv3}'[Forces curl to use SSL version 3 when negotiating with a remote SSL server.]' \
  '--ciphers[specifies which cipher to use for the ssl connection]:list of ciphers' \
  '--crlfile[specify file with revoked certificates]:file' \
  '--delegation[set delegation policy to use with GSS/kerberos]:delegation policy:(none policy always)' \
  {-E,--cert}'[use specified client certificate]:certificate file:_files' \
  '--engine[use selected OpenSSL crypto engine]:ssl crypto engine:{_curl_crypto_engine}' \
  '--egd-file[set ssl entropy gathering daemon socket]:entropy socket:_files' \
  '--cert-type[specify certificate type (PEM, DER, ENG)]:certificate type:(PEM DER ENG)' \
  '--cacert[specify certificate file to verify the peer with]:CA certificate:_files' \
  '--capath[specify a search path for certificate files]:CA certificate directory:_directories' \
  '--hostpubmd5[check remote hosts public key]:md5 hash' \
  {-k,--insecure}'[allow ssl to perform insecure ssl connections (ie, ignore certificate)]' \
  '--key[ssl/ssh private key file name]:key file:_files' \
  '--key-type[ssl/ssh private key file type]:file type:(PEM DER ENG)' \
  '--pubkey[ssh public key file]:pubkey file:_files' \
  '--random-file[set source of random data for ssl]:random source:_files' \
  '--no-sessionid[disable caching of ssl session ids]' \
  '--pass:phrase[passphrase for ssl/ssh private key]' \
  '--ssl[try to use ssl/tls for connection, if available]' \
  '--ssl-reqd[try to use ssl/tls for connection, fail if unavailable]' \
  '--tlsauthtype[set TLS authentication type (only SRP supported!)]:authtype' \
  '--tlsuser[set username for TLS authentication]:user' \
  '--tlspassword[set password for TLS authentication]:password' \
  )

# Connection arguments
arg_connection=(\
  {-4,--ipv4}'[prefer ipv4]' \
  {-6,--ipv6}'[prefer ipv6, if available]' \
  {-B,--use-ascii}'[use ascii mode]' \
  '--compressed[request a compressed transfer]' \
  '--connect-timeout[timeout for connection phase]:seconds' \
  {-I,--head}'[fetch http HEAD only (HTTP/FTP/FILE]' \
  '--interface[work on a specific interface]:name' \
  '--keepalive-time[set time to wait before sending keepalive probes]:seconds' \
  '--limit-rate[specify maximum transfer rate]:speed' \
  '--local-port[set preferred number or range of local ports to use]:num' \
  {-N,--no-buffer}'[disable buffering of the output stream]' \
  '--no-keepalive[disable use of keepalive messages in TCP connections]' \
  '--raw[disable all http decoding and pass raw data]' \
  '--resolve[provide a custom address for a specific host and port pair]:host\:port\:address' \
  '--retry[specify maximum number of retries for transient errors]:num' \
  '--retry-delay[specify delay between retries]:seconds' \
  '--retry-max-time[maximum time to spend on retries]:seconds' \
  '--tcp-nodelay[turn on TCP_NODELAY option]' \
  {-y,--speed-time}'[specify time to abort after if download is slower than speed-limit]:time' \
  {-Y,--speed-limit}'[specify minimum speed for --speed-time]:speed' \
  )

# Authentication arguments
arg_auth=(\
  '--anyauth[use any authentication method, default to most secure]' \
  '--basic[use HTTP Basic authentication]' \
  '--ntlm[enable ntlm authentication]' \
  '--digest[use http digest authentication]' \
  '--krb[use kerberos authentication]:auth:(clear safe confidential private)' \
  '--negotiate[enable GSS-Negotiate authentication]' \
  {-n,--netrc}'[scan ~/.netrc for login data]' \
  '--netrc-optional[like --netrc, but does not make .netrc usage mandatory]' \
  '--netrc-file[like --netrc, but specify file to use]:netrc file:_files' \
  '--tr-encoding[request compressed transfer-encoding]' \
  {-u,--user}'[specify user name and password for server authentication]:user\:password' \
  )

# Input arguments
arg_input=(\
  {-C,--continue-at}'[resume at offset ]:offset' \
  {-g,--globoff}'[do not glob {}\[\] letters]' \
  '--max-filesize[maximum filesize to download, fail for bigger files]:bytes' \
  '--proto[specify allowed protocols for transfer]:protocols' \
  '--proto-redir[specify allowed protocols for transfer after a redirect]:protocols' \
  {-r,--range}'[set range of bytes to request (HTTP/FTP/SFTP/FILE)]:range' \
  {-R,--remote-time}'[use timestamp of remote file for local file]' \
  {-T,--upload-file}'[transfer file to remote url (using PUT for HTTP)]:file to upload:_files' \
  '--url[specify a URL to fetch (multi)]:url:_urls' \
  {-z,--time-cond}'[request downloaded file to be newer than date or given reference file]:date expression' \
  )

# Output arguments
arg_output=(\
  '--create-dirs[create local directory hierarchy as needed]' \
  {-D,--dump-header}'[write protocol headers to file]:dump file:_files' \
  {-o,--output}'[write to specified file instead of stdout]:output file:_files' \
  {--progress-bar,-\#}'[display progress as a simple progress bar]' \
  {-\#,--progress-bar}'[Make curl display progress as a simple progress bar instead of the standard, more informational, meter.]' \
  {-R,--remote-time}'[use timestamp of remote file for local file]' \
  '--raw[disable all http decoding and pass raw data]' \
  {-s,--silent}'[silent mode, do not show progress meter or error messages]' \
  {-S,--show-error}'[show errors in silent mode]' \
  '--stderr[redirect stderr to specified file]:output file:_files' \
  '--trace[enable full trace dump of all incoming and outgoing data]:trace file:_files' \
  '--trace-ascii[enable full trace dump of all incoming and outgoing data, without hex data]:trace file:_files' \
  '--trace-time[prepends a time stamp to each trace or verbose line that curl displays]' \
  {-v,--verbose}'[output debug info]' \
  {-w,--write-out}'[specify message to output on successful operation]:format string' \
  '--xattr[store some file metadata in extended file attributes]' \
  {-X,--request}'[specifies request method for HTTP server]:method:(GET POST PUT DELETE HEAD OPTIONS TRACE CONNECT PATCH LINK UNLINK)' \
  )

_arguments -C -s $arg_http $arg_ftp $arg_other $arg_crypto $arg_connection $arg_auth $arg_input $arg_output \
  {-M,--manual}'[Print manual]' \
  '*'{-K,--config}'[Use other config file to read arguments from]:config file:_files' \
  '--libcurl[output libcurl code for the operation to file]:output file:_files' \
  {-m,--max-time}'[Limit total time of operation]:seconds' \
  {-s,--silent}'[Silent mode, do not show progress meter or error messages]' \
  {-S,--show-error}'[Show errors in silent mode]' \
  '--stderr[Redirect stderr to specified file]:output file:_files' \
  '-q[Do not read settings from .curlrc (must be first option)]' \
  {-h,--help}'[Print help and list of operations]' \
  {-V,--version}'[Print service API version]' \
  '--about[Print the information about service]' \
  '--host[Specify the host URL]':URL:_urls \
  '--dry-run[Print out the cURL command without executing it]' \
  {-ac,--accept}'[Set the Accept header in the request]: :{_values "Accept mime type" $(get_mime_type_completions)}' \
  {-ct,--content-type}'[Set the Content-type header in request]: :{_values "Content mime type" $(get_mime_type_completions)}' \
  '1: :->ops' \
  '*:: :->args' \
  && ret=0


case $state in
  ops)
    # Operations
    _values "Operations" \
            "deleteApiV1ActivitiesId[Delete a Activity]" \
            "getApiV1Activities[List activities]" \
            "getApiV1ActivitiesId[View activity details]" \
            "postApiV1Activities[Create a activity]" \
            "putApiV1ActivitiesId[Update Activity]"             "getApiV1AppStatus[app status]"             "getApiV1AuthProviders[List Authentication Providers]" \
            "getApiV1AuthProvidersId[Show Authentication Provider Details]" \
            "getApiV1AuthProvidersIdAffiliates[List Auth Provider Affiliates]" \
            "getApiV1AuthProvidersIdAffiliatesUid[View Auth Provider Affiliate]" \
            "postApiV1AuthProvidersIdAffiliatesUidDdsUser[Create User Account for Affiliate]"             "getApiV1AuthRoles[List authorization roles for a context]" \
            "getApiV1AuthRolesId[View authorization role details]"             "deleteApiV1CurrentUserApiKey[Delete a Current User API key]" \
            "getApiV1CurrentUser[current_user]" \
            "getApiV1CurrentUserApiKey[View Current User API key]" \
            "getApiV1CurrentUserUsage[current_user usage]" \
            "putApiV1CurrentUserApiKey[manage current_user api_key]"             "deleteApiV1FileVersionsId[Delete a file version metadata object]" \
            "getApiV1FileVersionsId[View file version]" \
            "getApiV1FileVersionsIdUrl[Download a file_version]" \
            "postApiV1FileVersionsIdCurrent[Promote file version]" \
            "putApiV1FileVersionsId[Update file version]"             "deleteApiV1FilesId[Delete a file metadata object]" \
            "getApiV1FilesId[View file metadata object details]" \
            "getApiV1FilesIdUrl[Download a file]" \
            "getApiV1FilesIdVersions[List file versions]" \
            "postApiV1Files[Create a file]" \
            "putApiV1FilesId[Update file properties]" \
            "putApiV1FilesIdMove[Move file]" \
            "putApiV1FilesIdRename[Rename file]"             "deleteApiV1FoldersId[Delete a folder]" \
            "getApiV1FoldersId[View folder details]" \
            "getApiV1FoldersIdChildren[List folder children]" \
            "postApiV1Folders[Create a project folder]" \
            "putApiV1FoldersIdMove[Move folder]" \
            "putApiV1FoldersIdRename[Rename folder]"             "deleteApiV1MetaObjectKindObjectIdTemplateId[Delete objet metadata]" \
            "getApiV1MetaObjectKindObjectId[View all object metadata]" \
            "getApiV1MetaObjectKindObjectIdTemplateId[View object metadata]" \
            "postApiV1MetaObjectKindObjectIdTemplateId[Create object metadata]" \
            "putApiV1MetaObjectKindObjectIdTemplateId[Update object metadata]"             "getApiV1ProjectRoles[List project roles]" \
            "getApiV1ProjectRolesId[View project role details]"             "getApiV1ProjectTransfers[View all project transfers]" \
            "getApiV1ProjectTransfersId[View a project transfer]" \
            "putApiV1ProjectTransfersIdAccept[Accept a project transfer]" \
            "putApiV1ProjectTransfersIdCancel[Cancel a project transfer]" \
            "putApiV1ProjectTransfersIdReject[Reject a project transfer]"             "deleteApiV1ProjectsId[Delete a project]" \
            "deleteApiV1ProjectsProjectIdAffiliatesUserId[Delete project affiliation]" \
            "deleteApiV1ProjectsProjectIdPermissionsUserId[Revoke project level permissions for user]" \
            "getApiV1Projects[List projects]" \
            "getApiV1ProjectsId[View project details]" \
            "getApiV1ProjectsIdChildren[List project children]" \
            "getApiV1ProjectsProjectIdAffiliates[List project affiliations]" \
            "getApiV1ProjectsProjectIdAffiliatesUserId[View project level affiliation for a user]" \
            "getApiV1ProjectsProjectIdPermissions[List project level permissions]" \
            "getApiV1ProjectsProjectIdPermissionsUserId[View project level permissions for a user]" \
            "getApiV1ProjectsProjectIdTransfers[List project transfers]" \
            "getApiV1ProjectsProjectIdUploads[List file uploads for a project]" \
            "postApiV1Projects[Create a project]" \
            "postApiV1ProjectsProjectIdTransfers[Initiate a project transfer]" \
            "postApiV1ProjectsProjectIdUploads[Initiate a chunked file upload for a project]" \
            "putApiV1ProjectsId[Update a project]" \
            "putApiV1ProjectsProjectIdAffiliatesUserId[Associate affiliate to a project]" \
            "putApiV1ProjectsProjectIdPermissionsUserId[Grant project level permissions to a user]"             "deleteApiV1RelationsId[Delete relation]" \
            "getApiV1RelationsId[View relation]" \
            "getApiV1RelationsObjectKindObjectId[List provenance relations]" \
            "postApiV1RelationsUsed[Create used relation]" \
            "postApiV1RelationsWasDerivedFrom[Create was derived from relation]" \
            "postApiV1RelationsWasGeneratedBy[Create was generated by relation]" \
            "postApiV1RelationsWasInvalidatedBy[Create was invalidated by relation]"             "postApiV1Search[Search Objects]" \
            "postApiV1SearchProvenance[Search Provenance]" \
            "postApiV1SearchProvenanceOrigin[Search Provenance wasGeneratedBy]"             "deleteApiV1SoftwareAgentsId[Delete a Software Agent]" \
            "deleteApiV1SoftwareAgentsIdApiKey[Delete software agent API key]" \
            "getApiV1SoftwareAgents[List software agents]" \
            "getApiV1SoftwareAgentsId[View software agent details]" \
            "getApiV1SoftwareAgentsIdApiKey[View software agent API key]" \
            "postApiV1SoftwareAgents[Create a software agent]" \
            "postApiV1SoftwareAgentsApiToken[Get software agent access token]" \
            "putApiV1SoftwareAgentsId[Update Software Agent]" \
            "putApiV1SoftwareAgentsIdApiKey[Re-generate software agent API key]"             "getApiV1StorageProviders[List storage providers]" \
            "getApiV1StorageProvidersId[View storage provider]"             "deleteApiV1SystemPermissionsUserId[Revoke system permissions to user]" \
            "getApiV1SystemPermissions[List system permissions]" \
            "getApiV1SystemPermissionsUserId[View system level permissions for user]" \
            "putApiV1SystemPermissionsUserId[Grant system level permission to user]"             "deleteApiV1TagsId[Delete a tag]" \
            "getApiV1TagsId[View tag]" \
            "getApiV1TagsLabels[List tag labels]" \
            "getApiV1TagsObjectKindObjectId[List tag objects]" \
            "postApiV1TagsObjectKindObjectId[Create object tag]" \
            "postApiV1TagsObjectKindObjectIdAppend[Append a list of object tags]"             "deleteApiV1TemplatePropertiesId[Delete a template property]" \
            "getApiV1TemplatePropertiesId[View property details]" \
            "putApiV1TemplatePropertiesId[Update template property]"             "deleteApiV1TemplatesId[Delete a template]" \
            "getApiV1Templates[List templates]" \
            "getApiV1TemplatesId[View template details]" \
            "getApiV1TemplatesTemplateIdProperties[List properties]" \
            "postApiV1Templates[Create template]" \
            "postApiV1TemplatesTemplateIdProperties[Create property]" \
            "putApiV1TemplatesId[Update template]"             "getApiV1UploadsId[View upload details/status]" \
            "putApiV1UploadsIdChunks[Get pre-signed URL to upload the next chunk]" \
            "putApiV1UploadsIdComplete[Complete the chunked file upload]" \
            "putApiV1UploadsIdHashes[Report upload hash]"             "getApiV1UserApiToken[api_token]"             "getApiV1Users[users]" \
            "getApiV1UsersId[View user details]" 
    _arguments "(--help)--help[Print information about operation]"

    ret=0
    ;;
  args)
    case $line[1] in
      deleteApiV1ActivitiesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Activity UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1Activities)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ActivitiesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Activity UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1Activities)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1ActivitiesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Activity UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1AppStatus)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1AuthProviders)
        local -a _op_arguments
        _op_arguments=(
                    "page=:[QUERY] Requested Page (default first page)"
"per_page=:[QUERY] Number of Objects per page (default 25)"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1AuthProvidersId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1AuthProvidersIdAffiliates)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] AuthenticationProvider UUID"
          "full_name_contains=:[QUERY] string contained in name(must be at least 3 characters)"
"page=:[QUERY] Requested Page (default first page)"
"per_page=:[QUERY] Number of Objects per page (default 25)"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1AuthProvidersIdAffiliatesUid)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] AuthenticationProvider UUID"
"uid=:[PATH] uid of the Affiliate from the AuthenticationProvider"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1AuthProvidersIdAffiliatesUidDdsUser)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] AuthenticationProvider UUID"
"uid=:[PATH] uid of the Affiliate from the AuthenticationProvider"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1AuthRoles)
        local -a _op_arguments
        _op_arguments=(
                    "context=:[QUERY] Role Context, must be one of system, project"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1AuthRolesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1CurrentUserApiKey)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1CurrentUser)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1CurrentUserApiKey)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1CurrentUserUsage)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1CurrentUserApiKey)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1FileVersionsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1FileVersionsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1FileVersionsIdUrl)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1FileVersionsIdCurrent)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1FileVersionsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1FilesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1FilesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1FilesIdUrl)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1FilesIdVersions)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1Files)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1FilesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1FilesIdMove)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1FilesIdRename)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1FoldersId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1FoldersId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1FoldersIdChildren)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
          "name_contains=:[QUERY] list children whose name contains this string"
"page=:[QUERY] Requested Page (default first page)"
"per_page=:[QUERY] Number of Objects per page (default 25)"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1Folders)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1FoldersIdMove)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1FoldersIdRename)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1MetaObjectKindObjectIdTemplateId)
        local -a _op_arguments
        _op_arguments=(
          "object_kind=:[PATH] "
"object_id=:[PATH] "
"template_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1MetaObjectKindObjectId)
        local -a _op_arguments
        _op_arguments=(
          "object_kind=:[PATH] "
"object_id=:[PATH] "
          "meta_template_name=:[QUERY] The unique meta_template_name of the template; performs an exact match."
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1MetaObjectKindObjectIdTemplateId)
        local -a _op_arguments
        _op_arguments=(
          "object_kind=:[PATH] "
"object_id=:[PATH] "
"template_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1MetaObjectKindObjectIdTemplateId)
        local -a _op_arguments
        _op_arguments=(
          "object_kind=:[PATH] "
"object_id=:[PATH] "
"template_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1MetaObjectKindObjectIdTemplateId)
        local -a _op_arguments
        _op_arguments=(
          "object_kind=:[PATH] "
"object_id=:[PATH] "
"template_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectRoles)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectRolesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectTransfers)
        local -a _op_arguments
        _op_arguments=(
                    "status=:[QUERY] Status must be one of the allowed statuses"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectTransfersId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1ProjectTransfersIdAccept)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] The unique id of the project transfer."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1ProjectTransfersIdCancel)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] The unique id of the project transfer."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1ProjectTransfersIdReject)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] The unique id of the project transfer."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1ProjectsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Project UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1ProjectsProjectIdAffiliatesUserId)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] "
"user_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1ProjectsProjectIdPermissionsUserId)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] "
"user_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1Projects)
        local -a _op_arguments
        _op_arguments=(
                    "page=:[QUERY] Requested Page (default first page)"
"per_page=:[QUERY] Number of Objects per page (default 25)"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Project UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectsIdChildren)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
          "name_contains=:[QUERY] list children whose name contains this string"
"page=:[QUERY] Requested Page (default first page)"
"per_page=:[QUERY] Number of Objects per page (default 25)"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectsProjectIdAffiliates)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectsProjectIdAffiliatesUserId)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] "
"user_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectsProjectIdPermissions)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectsProjectIdPermissionsUserId)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] "
"user_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectsProjectIdTransfers)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1ProjectsProjectIdUploads)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] The ID of the Project"
          "page=:[QUERY] Requested Page (default first page)"
"per_page=:[QUERY] Number of Objects per page (default 25)"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1Projects)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1ProjectsProjectIdTransfers)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] The ID of the Project"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1ProjectsProjectIdUploads)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] The ID of the Project"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1ProjectsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Project UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1ProjectsProjectIdAffiliatesUserId)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] "
"user_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1ProjectsProjectIdPermissionsUserId)
        local -a _op_arguments
        _op_arguments=(
          "project_id=:[PATH] "
"user_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1RelationsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Relation UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1RelationsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Relation UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1RelationsObjectKindObjectId)
        local -a _op_arguments
        _op_arguments=(
          "object_kind=:[PATH] Object kind"
"object_id=:[PATH] Object UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1RelationsUsed)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1RelationsWasDerivedFrom)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1RelationsWasGeneratedBy)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1RelationsWasInvalidatedBy)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1Search)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1SearchProvenance)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1SearchProvenanceOrigin)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1SoftwareAgentsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Software Agent UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1SoftwareAgentsIdApiKey)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Software agent UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1SoftwareAgents)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1SoftwareAgentsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Software agent UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1SoftwareAgentsIdApiKey)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Software agent UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1SoftwareAgents)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1SoftwareAgentsApiToken)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1SoftwareAgentsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Software Agent UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1SoftwareAgentsIdApiKey)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Software agent UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1StorageProviders)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1StorageProvidersId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] StorageProvider UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1SystemPermissionsUserId)
        local -a _op_arguments
        _op_arguments=(
          "user_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1SystemPermissions)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1SystemPermissionsUserId)
        local -a _op_arguments
        _op_arguments=(
          "user_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1SystemPermissionsUserId)
        local -a _op_arguments
        _op_arguments=(
          "user_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1TagsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1TagsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1TagsLabels)
        local -a _op_arguments
        _op_arguments=(
                    "object_kind=:[QUERY] Restricts search scope to tags for this kind of object"
"label_contains=:[QUERY] Searches for tags that contain this text fragment"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1TagsObjectKindObjectId)
        local -a _op_arguments
        _op_arguments=(
          "object_kind=:[PATH] "
"object_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1TagsObjectKindObjectId)
        local -a _op_arguments
        _op_arguments=(
          "object_kind=:[PATH] "
"object_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1TagsObjectKindObjectIdAppend)
        local -a _op_arguments
        _op_arguments=(
          "object_kind=:[PATH] "
"object_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1TemplatePropertiesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Template property UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1TemplatePropertiesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Property UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1TemplatePropertiesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      deleteApiV1TemplatesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Template UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1Templates)
        local -a _op_arguments
        _op_arguments=(
                    "name_contains=:[QUERY] list templates whose name contains the specified string"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1TemplatesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Template UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1TemplatesTemplateIdProperties)
        local -a _op_arguments
        _op_arguments=(
          "template_id=:[PATH] "
          "key=:[QUERY] The unique key of the template property"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1Templates)
        local -a _op_arguments
        _op_arguments=(
                              )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      postApiV1TemplatesTemplateIdProperties)
        local -a _op_arguments
        _op_arguments=(
          "template_id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1TemplatesId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Template UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1UploadsId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] Globally unique id of the upload object."
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1UploadsIdChunks)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] The Upload Id"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1UploadsIdComplete)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      putApiV1UploadsIdHashes)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] "
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1UserApiToken)
        local -a _op_arguments
        _op_arguments=(
                    "access_token=:[QUERY] "
"authentication_service_id=:[QUERY] authentication service uuid"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1Users)
        local -a _op_arguments
        _op_arguments=(
                    "last_name_begins_with=:[QUERY] list users whose last name begins with this string"
"first_name_begins_with=:[QUERY] list users whose first name begins with this string"
"full_name_contains=:[QUERY] list users whose full name contains this string"
"page=:[QUERY] Requested Page (default first page)"
"per_page=:[QUERY] Number of Objects per page (default 25)"
          )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
      getApiV1UsersId)
        local -a _op_arguments
        _op_arguments=(
          "id=:[PATH] User UUID"
                    )
        _describe -t actions 'operations' _op_arguments -S '' && ret=0
        ;;
    esac
    ;;

esac

return ret

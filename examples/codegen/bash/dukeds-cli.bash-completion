# dukeds-cli completion                               -*- shell-script -*-

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! swagger-codegen (https://github.com/swagger-api/swagger-codegen)
# ! FROM SWAGGER SPECIFICATION IN JSON.
# !
# ! Generated on: 2017-10-04T20:19:52.734Z
# !
# !
# ! System wide installation:
# !
# ! $ sudo cp dukeds-cli.bash-completion /etc/bash-completion.d/dukeds-cli
# !
# !
# ! User home installation (add this line to .bash_profile):
# !
# ! [ -r ~/dukeds-cli.bash-completion ] && source ~/dukeds-cli.bash-completion
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

declare -A mime_type_abbreviations
# text/*
mime_type_abbreviations["text"]="text/plain"
mime_type_abbreviations["html"]="text/html"
mime_type_abbreviations["md"]="text/x-markdown"
mime_type_abbreviations["csv"]="text/csv"
mime_type_abbreviations["css"]="text/css"
mime_type_abbreviations["rtf"]="text/rtf"
# application/*
mime_type_abbreviations["json"]="application/json"
mime_type_abbreviations["xml"]="application/xml"
mime_type_abbreviations["yaml"]="application/yaml"
mime_type_abbreviations["js"]="application/javascript"
mime_type_abbreviations["bin"]="application/octet-stream"
mime_type_abbreviations["rdf"]="application/rdf+xml"
# image/*
mime_type_abbreviations["jpg"]="image/jpeg"
mime_type_abbreviations["png"]="image/png"
mime_type_abbreviations["gif"]="image/gif"
mime_type_abbreviations["bmp"]="image/bmp"
mime_type_abbreviations["tiff"]="image/tiff"


#
# Check if this is OSX, if so defined custom init_completion
#
if [[ `uname` =~ "Darwin" ]]; then
    __osx_init_completion()
    {
        COMPREPLY=()
        _get_comp_words_by_ref cur prev words cword
    }
fi

_dukeds-cli()
{
    local cur
    local prev
    local words
    local cword

    # The reference of currently selected REST operation
    local operation=""

    # The list of available operation in the REST service
    # It's modelled as an associative array for efficient key lookup
    declare -A operations
    operations["deleteApiV1ActivitiesId"]=1
    operations["getApiV1Activities"]=1
    operations["getApiV1ActivitiesId"]=1
    operations["postApiV1Activities"]=1
    operations["putApiV1ActivitiesId"]=1
    operations["getApiV1AppStatus"]=1
    operations["getApiV1AuthProviders"]=1
    operations["getApiV1AuthProvidersId"]=1
    operations["getApiV1AuthProvidersIdAffiliates"]=1
    operations["getApiV1AuthProvidersIdAffiliatesUid"]=1
    operations["postApiV1AuthProvidersIdAffiliatesUidDdsUser"]=1
    operations["getApiV1AuthRoles"]=1
    operations["getApiV1AuthRolesId"]=1
    operations["deleteApiV1CurrentUserApiKey"]=1
    operations["getApiV1CurrentUser"]=1
    operations["getApiV1CurrentUserApiKey"]=1
    operations["getApiV1CurrentUserUsage"]=1
    operations["putApiV1CurrentUserApiKey"]=1
    operations["deleteApiV1FileVersionsId"]=1
    operations["getApiV1FileVersionsId"]=1
    operations["getApiV1FileVersionsIdUrl"]=1
    operations["postApiV1FileVersionsIdCurrent"]=1
    operations["putApiV1FileVersionsId"]=1
    operations["deleteApiV1FilesId"]=1
    operations["getApiV1FilesId"]=1
    operations["getApiV1FilesIdUrl"]=1
    operations["getApiV1FilesIdVersions"]=1
    operations["postApiV1Files"]=1
    operations["putApiV1FilesId"]=1
    operations["putApiV1FilesIdMove"]=1
    operations["putApiV1FilesIdRename"]=1
    operations["deleteApiV1FoldersId"]=1
    operations["getApiV1FoldersId"]=1
    operations["getApiV1FoldersIdChildren"]=1
    operations["postApiV1Folders"]=1
    operations["putApiV1FoldersIdMove"]=1
    operations["putApiV1FoldersIdRename"]=1
    operations["deleteApiV1MetaObjectKindObjectIdTemplateId"]=1
    operations["getApiV1MetaObjectKindObjectId"]=1
    operations["getApiV1MetaObjectKindObjectIdTemplateId"]=1
    operations["postApiV1MetaObjectKindObjectIdTemplateId"]=1
    operations["putApiV1MetaObjectKindObjectIdTemplateId"]=1
    operations["getApiV1ProjectRoles"]=1
    operations["getApiV1ProjectRolesId"]=1
    operations["getApiV1ProjectTransfers"]=1
    operations["getApiV1ProjectTransfersId"]=1
    operations["putApiV1ProjectTransfersIdAccept"]=1
    operations["putApiV1ProjectTransfersIdCancel"]=1
    operations["putApiV1ProjectTransfersIdReject"]=1
    operations["deleteApiV1ProjectsId"]=1
    operations["deleteApiV1ProjectsProjectIdAffiliatesUserId"]=1
    operations["deleteApiV1ProjectsProjectIdPermissionsUserId"]=1
    operations["getApiV1Projects"]=1
    operations["getApiV1ProjectsId"]=1
    operations["getApiV1ProjectsIdChildren"]=1
    operations["getApiV1ProjectsProjectIdAffiliates"]=1
    operations["getApiV1ProjectsProjectIdAffiliatesUserId"]=1
    operations["getApiV1ProjectsProjectIdPermissions"]=1
    operations["getApiV1ProjectsProjectIdPermissionsUserId"]=1
    operations["getApiV1ProjectsProjectIdTransfers"]=1
    operations["getApiV1ProjectsProjectIdUploads"]=1
    operations["postApiV1Projects"]=1
    operations["postApiV1ProjectsProjectIdTransfers"]=1
    operations["postApiV1ProjectsProjectIdUploads"]=1
    operations["putApiV1ProjectsId"]=1
    operations["putApiV1ProjectsProjectIdAffiliatesUserId"]=1
    operations["putApiV1ProjectsProjectIdPermissionsUserId"]=1
    operations["deleteApiV1RelationsId"]=1
    operations["getApiV1RelationsId"]=1
    operations["getApiV1RelationsObjectKindObjectId"]=1
    operations["postApiV1RelationsUsed"]=1
    operations["postApiV1RelationsWasDerivedFrom"]=1
    operations["postApiV1RelationsWasGeneratedBy"]=1
    operations["postApiV1RelationsWasInvalidatedBy"]=1
    operations["postApiV1Search"]=1
    operations["postApiV1SearchProvenance"]=1
    operations["postApiV1SearchProvenanceOrigin"]=1
    operations["deleteApiV1SoftwareAgentsId"]=1
    operations["deleteApiV1SoftwareAgentsIdApiKey"]=1
    operations["getApiV1SoftwareAgents"]=1
    operations["getApiV1SoftwareAgentsId"]=1
    operations["getApiV1SoftwareAgentsIdApiKey"]=1
    operations["postApiV1SoftwareAgents"]=1
    operations["postApiV1SoftwareAgentsApiToken"]=1
    operations["putApiV1SoftwareAgentsId"]=1
    operations["putApiV1SoftwareAgentsIdApiKey"]=1
    operations["getApiV1StorageProviders"]=1
    operations["getApiV1StorageProvidersId"]=1
    operations["deleteApiV1SystemPermissionsUserId"]=1
    operations["getApiV1SystemPermissions"]=1
    operations["getApiV1SystemPermissionsUserId"]=1
    operations["putApiV1SystemPermissionsUserId"]=1
    operations["deleteApiV1TagsId"]=1
    operations["getApiV1TagsId"]=1
    operations["getApiV1TagsLabels"]=1
    operations["getApiV1TagsObjectKindObjectId"]=1
    operations["postApiV1TagsObjectKindObjectId"]=1
    operations["postApiV1TagsObjectKindObjectIdAppend"]=1
    operations["deleteApiV1TemplatePropertiesId"]=1
    operations["getApiV1TemplatePropertiesId"]=1
    operations["putApiV1TemplatePropertiesId"]=1
    operations["deleteApiV1TemplatesId"]=1
    operations["getApiV1Templates"]=1
    operations["getApiV1TemplatesId"]=1
    operations["getApiV1TemplatesTemplateIdProperties"]=1
    operations["postApiV1Templates"]=1
    operations["postApiV1TemplatesTemplateIdProperties"]=1
    operations["putApiV1TemplatesId"]=1
    operations["getApiV1UploadsId"]=1
    operations["putApiV1UploadsIdChunks"]=1
    operations["putApiV1UploadsIdComplete"]=1
    operations["putApiV1UploadsIdHashes"]=1
    operations["getApiV1UserApiToken"]=1
    operations["getApiV1Users"]=1
    operations["getApiV1UsersId"]=1

    # An associative array of operations to their parameters
    # Only include path, query and header parameters
    declare -A operation_parameters
    operation_parameters["deleteApiV1ActivitiesId"]="id= "
    operation_parameters["getApiV1Activities"]=""
    operation_parameters["getApiV1ActivitiesId"]="id= "
    operation_parameters["postApiV1Activities"]=""
    operation_parameters["putApiV1ActivitiesId"]="id= "
    operation_parameters["getApiV1AppStatus"]=""
    operation_parameters["getApiV1AuthProviders"]="page= per_page= "
    operation_parameters["getApiV1AuthProvidersId"]="id= "
    operation_parameters["getApiV1AuthProvidersIdAffiliates"]="id= full_name_contains= page= per_page= "
    operation_parameters["getApiV1AuthProvidersIdAffiliatesUid"]="id= uid= "
    operation_parameters["postApiV1AuthProvidersIdAffiliatesUidDdsUser"]="id= uid= "
    operation_parameters["getApiV1AuthRoles"]="context= "
    operation_parameters["getApiV1AuthRolesId"]="id= "
    operation_parameters["deleteApiV1CurrentUserApiKey"]=""
    operation_parameters["getApiV1CurrentUser"]=""
    operation_parameters["getApiV1CurrentUserApiKey"]=""
    operation_parameters["getApiV1CurrentUserUsage"]=""
    operation_parameters["putApiV1CurrentUserApiKey"]=""
    operation_parameters["deleteApiV1FileVersionsId"]="id= "
    operation_parameters["getApiV1FileVersionsId"]="id= "
    operation_parameters["getApiV1FileVersionsIdUrl"]="id= "
    operation_parameters["postApiV1FileVersionsIdCurrent"]="id= "
    operation_parameters["putApiV1FileVersionsId"]="id= "
    operation_parameters["deleteApiV1FilesId"]="id= "
    operation_parameters["getApiV1FilesId"]="id= "
    operation_parameters["getApiV1FilesIdUrl"]="id= "
    operation_parameters["getApiV1FilesIdVersions"]="id= "
    operation_parameters["postApiV1Files"]=""
    operation_parameters["putApiV1FilesId"]="id= "
    operation_parameters["putApiV1FilesIdMove"]="id= "
    operation_parameters["putApiV1FilesIdRename"]="id= "
    operation_parameters["deleteApiV1FoldersId"]="id= "
    operation_parameters["getApiV1FoldersId"]="id= "
    operation_parameters["getApiV1FoldersIdChildren"]="id= name_contains= page= per_page= "
    operation_parameters["postApiV1Folders"]=""
    operation_parameters["putApiV1FoldersIdMove"]="id= "
    operation_parameters["putApiV1FoldersIdRename"]="id= "
    operation_parameters["deleteApiV1MetaObjectKindObjectIdTemplateId"]="object_kind= object_id= template_id= "
    operation_parameters["getApiV1MetaObjectKindObjectId"]="object_kind= object_id= meta_template_name= "
    operation_parameters["getApiV1MetaObjectKindObjectIdTemplateId"]="object_kind= object_id= template_id= "
    operation_parameters["postApiV1MetaObjectKindObjectIdTemplateId"]="object_kind= object_id= template_id= "
    operation_parameters["putApiV1MetaObjectKindObjectIdTemplateId"]="object_kind= object_id= template_id= "
    operation_parameters["getApiV1ProjectRoles"]=""
    operation_parameters["getApiV1ProjectRolesId"]="id= "
    operation_parameters["getApiV1ProjectTransfers"]="status= "
    operation_parameters["getApiV1ProjectTransfersId"]="id= "
    operation_parameters["putApiV1ProjectTransfersIdAccept"]="id= "
    operation_parameters["putApiV1ProjectTransfersIdCancel"]="id= "
    operation_parameters["putApiV1ProjectTransfersIdReject"]="id= "
    operation_parameters["deleteApiV1ProjectsId"]="id= "
    operation_parameters["deleteApiV1ProjectsProjectIdAffiliatesUserId"]="project_id= user_id= "
    operation_parameters["deleteApiV1ProjectsProjectIdPermissionsUserId"]="project_id= user_id= "
    operation_parameters["getApiV1Projects"]="page= per_page= "
    operation_parameters["getApiV1ProjectsId"]="id= "
    operation_parameters["getApiV1ProjectsIdChildren"]="id= name_contains= page= per_page= "
    operation_parameters["getApiV1ProjectsProjectIdAffiliates"]="project_id= "
    operation_parameters["getApiV1ProjectsProjectIdAffiliatesUserId"]="project_id= user_id= "
    operation_parameters["getApiV1ProjectsProjectIdPermissions"]="project_id= "
    operation_parameters["getApiV1ProjectsProjectIdPermissionsUserId"]="project_id= user_id= "
    operation_parameters["getApiV1ProjectsProjectIdTransfers"]="project_id= "
    operation_parameters["getApiV1ProjectsProjectIdUploads"]="project_id= page= per_page= "
    operation_parameters["postApiV1Projects"]=""
    operation_parameters["postApiV1ProjectsProjectIdTransfers"]="project_id= "
    operation_parameters["postApiV1ProjectsProjectIdUploads"]="project_id= "
    operation_parameters["putApiV1ProjectsId"]="id= "
    operation_parameters["putApiV1ProjectsProjectIdAffiliatesUserId"]="project_id= user_id= "
    operation_parameters["putApiV1ProjectsProjectIdPermissionsUserId"]="project_id= user_id= "
    operation_parameters["deleteApiV1RelationsId"]="id= "
    operation_parameters["getApiV1RelationsId"]="id= "
    operation_parameters["getApiV1RelationsObjectKindObjectId"]="object_kind= object_id= "
    operation_parameters["postApiV1RelationsUsed"]=""
    operation_parameters["postApiV1RelationsWasDerivedFrom"]=""
    operation_parameters["postApiV1RelationsWasGeneratedBy"]=""
    operation_parameters["postApiV1RelationsWasInvalidatedBy"]=""
    operation_parameters["postApiV1Search"]=""
    operation_parameters["postApiV1SearchProvenance"]=""
    operation_parameters["postApiV1SearchProvenanceOrigin"]=""
    operation_parameters["deleteApiV1SoftwareAgentsId"]="id= "
    operation_parameters["deleteApiV1SoftwareAgentsIdApiKey"]="id= "
    operation_parameters["getApiV1SoftwareAgents"]=""
    operation_parameters["getApiV1SoftwareAgentsId"]="id= "
    operation_parameters["getApiV1SoftwareAgentsIdApiKey"]="id= "
    operation_parameters["postApiV1SoftwareAgents"]=""
    operation_parameters["postApiV1SoftwareAgentsApiToken"]=""
    operation_parameters["putApiV1SoftwareAgentsId"]="id= "
    operation_parameters["putApiV1SoftwareAgentsIdApiKey"]="id= "
    operation_parameters["getApiV1StorageProviders"]=""
    operation_parameters["getApiV1StorageProvidersId"]="id= "
    operation_parameters["deleteApiV1SystemPermissionsUserId"]="user_id= "
    operation_parameters["getApiV1SystemPermissions"]=""
    operation_parameters["getApiV1SystemPermissionsUserId"]="user_id= "
    operation_parameters["putApiV1SystemPermissionsUserId"]="user_id= "
    operation_parameters["deleteApiV1TagsId"]="id= "
    operation_parameters["getApiV1TagsId"]="id= "
    operation_parameters["getApiV1TagsLabels"]="object_kind= label_contains= "
    operation_parameters["getApiV1TagsObjectKindObjectId"]="object_kind= object_id= "
    operation_parameters["postApiV1TagsObjectKindObjectId"]="object_kind= object_id= "
    operation_parameters["postApiV1TagsObjectKindObjectIdAppend"]="object_kind= object_id= "
    operation_parameters["deleteApiV1TemplatePropertiesId"]="id= "
    operation_parameters["getApiV1TemplatePropertiesId"]="id= "
    operation_parameters["putApiV1TemplatePropertiesId"]="id= "
    operation_parameters["deleteApiV1TemplatesId"]="id= "
    operation_parameters["getApiV1Templates"]="name_contains= "
    operation_parameters["getApiV1TemplatesId"]="id= "
    operation_parameters["getApiV1TemplatesTemplateIdProperties"]="template_id= key= "
    operation_parameters["postApiV1Templates"]=""
    operation_parameters["postApiV1TemplatesTemplateIdProperties"]="template_id= "
    operation_parameters["putApiV1TemplatesId"]="id= "
    operation_parameters["getApiV1UploadsId"]="id= "
    operation_parameters["putApiV1UploadsIdChunks"]="id= "
    operation_parameters["putApiV1UploadsIdComplete"]="id= "
    operation_parameters["putApiV1UploadsIdHashes"]="id= "
    operation_parameters["getApiV1UserApiToken"]="access_token= authentication_service_id= "
    operation_parameters["getApiV1Users"]="last_name_begins_with= first_name_begins_with= full_name_contains= page= per_page= "
    operation_parameters["getApiV1UsersId"]="id= "

    # An associative array of possible values for enum parameters
    declare -A operation_parameters_enum_values

    #
    # Check if this is OSX and use special __osx_init_completion function
    #
    if [[ `uname` =~ "Darwin" ]]; then
        __osx_init_completion || return
    else
        _init_completion -s || return
    fi


    # Check if operation is already in the command line provided
    for word in "${words[@]}"; do
        if [[ -n $word && ${operations[$word]} ]]; then
            operation="${word}"
        fi
    done

    if [[ -z $operation ]]; then
        case $prev in
            --ciphers|--connect-timeout|-C|--continue-at|-F|--form|--form-string|\
            --ftp-account|--ftp-alternative-to-user|-P|--ftp-port|-H|--header|-h|\
            --help|--hostpubmd5|--keepalive-time|--krb|--limit-rate|--local-port|\
            --mail-from|--mail-rcpt|--max-filesize|--max-redirs|-m|--max-time|\
            --pass|--proto|--proto-redir|--proxy-user|--proxy1.0|-Q|--quote|-r|\
            --range|-X|--request|--retry|--retry-delay|--retry-max-time|\
            --socks5-gssapi-service|-t|--telnet-option|--tftp-blksize|-z|\
            --time-cond|--url|-u|--user|-A|--user-agent|-V|--version|-w|\
            --write-out|--resolve|--tlsuser|--tlspassword|--about)
                return
                ;;
            -K|--config|-b|--cookie|-c|--cookie-jar|-D|--dump-header|--egd-file|\
            --key|--libcurl|-o|--output|--random-file|-T|--upload-file|--trace|\
            --trace-ascii|--netrc-file)
                _filedir
                return
                ;;
            --cacert|-E|--cert)
                _filedir '@(c?(e)rt|cer|pem|der)'
                return
                ;;
            --capath)
                _filedir -d
                return
                ;;
            --cert-type|--key-type)
                COMPREPLY=( $( compgen -W 'DER PEM ENG' -- "$cur" ) )
                return
                ;;
            --crlfile)
                _filedir crl
                return
                ;;
            -d|--data|--data-ascii|--data-binary|--data-urlencode)
                if [[ $cur == \@* ]]; then
                    cur=${cur:1}
                    _filedir
                    COMPREPLY=( "${COMPREPLY[@]/#/@}" )
                fi
                return
                ;;
            --delegation)
                COMPREPLY=( $( compgen -W 'none policy always' -- "$cur" ) )
                return
                ;;
            --engine)
                COMPREPLY=( $( compgen -W 'list' -- "$cur" ) )
                return
                ;;
            --ftp-method)
                COMPREPLY=( $( compgen -W 'multicwd nocwd singlecwd' -- "$cur" ) )
                return
                ;;
            --ftp-ssl-ccc-mode)
                COMPREPLY=( $( compgen -W 'active passive' -- "$cur" ) )
                return
                ;;
            --interface)
                _available_interfaces -a
                return
                ;;
            -x|--proxy|--socks4|--socks4a|--socks5|--socks5-hostname)
                _known_hosts_real
                return
                ;;
            --pubkey)
                _filedir pub
                return
                ;;
            --stderr)
                COMPREPLY=( $( compgen -W '-' -- "$cur" ) )
                _filedir
                return
                ;;
            --tlsauthtype)
                COMPREPLY=( $( compgen -W 'SRP' -- "$cur" ) )
                return
                ;;
            --host)
                COMPREPLY=( $( compgen -W 'http:// https://' -- "$cur" ) )
                return
                ;;
            -ct|--content-type|-ac|--accept)
                COMPREPLY=( $( compgen -W '${!mime_type_abbreviations[*]}' -- "$cur" ) )
                return
                ;;
        esac
    fi

    #
    # Complete the server address based on ~/.ssh/known_hosts
    # and ~/.ssh/config
    #
    local prefix=${COMP_WORDS[COMP_CWORD-2]}
    local colon=${COMP_WORDS[COMP_CWORD-1]}
    if [[ "$colon" == ":" && ( $prefix == "https" || $prefix == "http" ) ]]; then
        COMPREPLY=()
        local comp_ssh_hosts=`[[ -f ~/.ssh/known_hosts ]] && \
                              ( cat ~/.ssh/known_hosts | \
                              grep '^[a-zA-Z0-9]' | \
                              cut -f 1 -d ' ' | \
                              sed -e s/,.*//g | \
                              grep -v ^# | \
                              uniq | \
                              grep -v "\[" ) ;
                              [[ -f ~/.ssh/config ]] && \
                              ( cat ~/.ssh/config | \
                              grep "^Host " | \
                              awk '{print $2}' )`
        COMPREPLY=( $( compgen -P '//' -W '${comp_ssh_hosts}' -- "${cur:2}") )
        return
    fi

    #
    # Complete the dukeds-cli and cURL's arguments
    #
    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$(_parse_help curl) $(_parse_help $1)' -- "$cur" ) )
        return
    fi

    #
    # If the argument starts with a letter this could be either an operation
    # or an operation parameter
    # When $cur is empty, suggest the list of operations by default
    #
    if [[ $cur =~ ^[A-Za-z_0-9]* ]]; then
        # If operation has not been yet selected, suggest the list of operations
        # otherwise suggest arguments of this operation as declared in the
        # Swagger specification
        if [[ -z $operation ]]; then
            COMPREPLY=( $(compgen -W '${!operations[*]}' -- ${cur}) )
        else
            COMPREPLY=( $(compgen -W '${operation_parameters[$operation]}' -- ${cur}) )
            compopt -o nospace
        fi
        return
    fi

} &&
complete -F _dukeds-cli dukeds-cli

# ex: ts=4 sw=4 et filetype=sh
